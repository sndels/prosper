#pragma shader_stage(compute)

#extension GL_EXT_shader_image_load_formatted : require

// Based on A Life of a Bokeh by Guillaume Abadie
// https://advances.realtimerendering.com/s2018/index.htm
// implemented using https://github.com/GPUOpen-Effects/FidelityFX-SPD

layout(set = 0, binding = 0) uniform image2D imgSrc;
layout(set = 0, binding = 1) uniform coherent image2D imgDst[12];
layout(std430, set = 0, binding = 2) coherent buffer SpdGlobalAtomicBuffer
{
    uint counter;
}
spdGlobalAtomic;

layout(push_constant) uniform ReducePC
{
    ivec2 topMipResolution;
    uint numWorkGroupsPerSlice;
    uint mips;
}
PC;

#define A_GPU 1
#define A_GLSL 1
#include "../ext/ffx_a.h"
#include "bilateral.glsl"

shared AF4 spdIntermediate[16][16];
shared AU1 spdCounter;

AF4 SpdLoadSourceImage(ASU2 p, AU1 slice)
{
    // Clamp to edge
    p = min(p, PC.topMipResolution - 1);

    return imageLoad(imgSrc, p);
}

AF4 SpdLoad(ASU2 p, AU1 slice)
{
    // Clamp to edge
    ASU2 mip5Res = max(PC.topMipResolution >> 5, ASU2(1));
    p = min(p, mip5Res - 1);

    return imageLoad(imgDst[5], p);
}

void SpdStore(ASU2 p, AF4 value, AU1 mip, AU1 slice)
{
    // Skip writes that would have gone over
    ASU2 mipRes = max(PC.topMipResolution >> mip, ASU2(1));
    if (any(greaterThanEqual(p, mipRes)))
        return;

    imageStore(imgDst[mip], p, value);
}

void SpdIncreaseAtomicCounter(AU1 slice)
{
    spdCounter = atomicAdd(spdGlobalAtomic.counter, 1);
}

AF4 SpdLoadIntermediate(AU1 x, AU1 y) { return spdIntermediate[x][y]; }

void SpdStoreIntermediate(AU1 x, AU1 y, AF4 value)
{
    spdIntermediate[x][y] = value;
}

AU1 SpdGetAtomicCounter() { return spdCounter; }

void SpdResetAtomicCounter(AU1 slice) { spdGlobalAtomic.counter = 0; }

AF4 SpdReduce4(AF4 v0, AF4 v1, AF4 v2, AF4 v3)
{
    // TODO:
    // Abadie mentions HDR weights for downsampling based on
    // https://graphicrants.blogspot.com/2013/12/tone-mapping.html
    BilateralInput bilaInput;
    bilaInput.illuminationWeight01 = v0;
    bilaInput.illuminationWeight11 = v1;
    bilaInput.illuminationWeight10 = v2;
    bilaInput.illuminationWeight00 = v3;

    return bilateralFilter(bilaInput);
}

#include "../ext/ffx_spd.h"

layout(local_size_x = GROUP_X) in;
void main()
{
    SpdDownsample(
        AU2(gl_WorkGroupID.xy), AU1(gl_LocalInvocationIndex), AU1(PC.mips),
        AU1(PC.numWorkGroupsPerSlice), AU1(gl_WorkGroupID.z));
}
