#pragma shader_stage(mesh)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require

#ifdef USE_GBUFFER_PC
#include "gbuffer_pc.glsl"
#else // !USE_GBUFFER_PC
#include "forward_pc.glsl"
#endif // USE_GBUFFER_PC

#include "scene/camera.glsl"
#include "scene/geometry.glsl"
#include "scene/transforms.glsl"

layout(local_size_x = LOCAL_SIZE_X) in;
layout(
    triangles, max_vertices = MAX_MS_VERTS, max_primitives = MAX_MS_PRIMS) out;

// gpuinfo lists minimum
// maxMeshOutputMemorySize=32768
// maxMeshOutputComponents=127

layout(location = 0) out OutVertex
{
    vec3 positionWorld;
    float zCam;
    vec2 texCoord0;
    vec4 positionNDC;
    vec4 prevPositionNDC;
    mat3 tbn;
}
outVertices[];

layout(location = 9) perprimitiveEXT out OutPrimitive { uint meshletID; }
outPrimitives[];

void writeTransformedVertex(
    GeometryMetadata metadata, uint globalVertexIndex, uint meshletVertexIndex)
{
    Transforms trfn = modelInstanceTransforms.instance[PC.ModelInstanceID];
    Vertex vertexModel = loadVertex(metadata, globalVertexIndex);
    Vertex vertexWorld = transform(vertexModel, trfn);

    if (vertexWorld.Tangent.w != 0)
        outVertices[meshletVertexIndex].tbn =
            generateTBN(vertexWorld.Normal, vertexWorld.Tangent);
    else
        outVertices[meshletVertexIndex].tbn =
            mat3(vec3(0), vec3(0), vertexWorld.Normal);

    outVertices[meshletVertexIndex].positionWorld = vertexWorld.Position;
    outVertices[meshletVertexIndex].texCoord0 = vertexWorld.TexCoord0;

    vec4 posCam = camera.worldToCamera * vec4(vertexWorld.Position, 1);
    outVertices[meshletVertexIndex].zCam = posCam.z;

    vec4 posNDC = camera.cameraToClip * posCam;
    outVertices[meshletVertexIndex].positionNDC = posNDC;

    Transforms prevTrfn = trfn;
    if (PC.previousTransformValid == 1)
        prevTrfn = previousModelInstanceTransforms.instance[PC.ModelInstanceID];
    vec3 prevPositionWorld = worldPosition(vertexModel, prevTrfn);

    outVertices[meshletVertexIndex].prevPositionNDC =
        camera.previousCameraToClip * camera.previousWorldToCamera *
        vec4(prevPositionWorld, 1.);

    gl_MeshVerticesEXT[meshletVertexIndex].gl_Position = posNDC;
}

void main()
{
    uint meshletID = gl_WorkGroupID.x;
    uint threadID = gl_LocalInvocationIndex;

    GeometryMetadata metadata = geometryMetadatas.data[PC.MeshID];
    MeshletInfo meshletInfo = loadMeshletInfo(metadata, meshletID);

    SetMeshOutputsEXT(meshletInfo.vertexCount, meshletInfo.triangleCount);

    if (threadID < meshletInfo.vertexCount)
    {
        uint vertexIndex =
            loadMeshletVertexIndex(metadata, meshletInfo, threadID);

        writeTransformedVertex(metadata, vertexIndex, threadID);
    }

    if (threadID < meshletInfo.triangleCount)
    {
        outPrimitives[threadID].meshletID = meshletID;
        gl_MeshPrimitivesEXT[threadID].gl_PrimitiveID = int(threadID);
        gl_PrimitiveTriangleIndicesEXT[threadID] =
            loadMeshletTriangle(metadata, meshletInfo, threadID);
    }
}
