#pragma shader_stage(mesh)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require

#ifdef USE_GBUFFER_PC
#include "shared/shader_structs/push_constants/gbuffer.h"
layout(push_constant) uniform PushConstants { GBufferPC PC; };
#else // !USE_GBUFFER_PC
#include "shared/shader_structs/push_constants/forward.h"
layout(push_constant) uniform PushConstants { ForwardPC PC; };
#endif // USE_GBUFFER_PC

#include "common/math.glsl"
#include "scene/camera.glsl"
#include "scene/geometry.glsl"
#include "scene/instances.glsl"

layout(std430, set = MESH_SHADER_SET, binding = 0) buffer DrawStats
{
    uint drawnMeshletCount;
    uint rasterizedTriangleCount;
}
drawStats;

struct MeshletInstance
{
    uint drawInstanceIndex;
    uint meshletIndex;
};
layout(std430, set = MESH_SHADER_SET, binding = 1) buffer MeshletInstances
{
    uint count;
    MeshletInstance instance[];
}
meshletInstances;

layout(local_size_x = LOCAL_SIZE_X) in;
layout(
    triangles, max_vertices = MAX_MS_VERTS, max_primitives = MAX_MS_PRIMS) out;

// gpuinfo lists minimum
// maxMeshOutputMemorySize=32768
// maxMeshOutputComponents=127

// TODO:
// Pack these further because less data is less data
layout(location = 0) out vec3 outPositionWorld[];
layout(location = 1) out float outZCam[];
layout(location = 2) out vec2 outTexCoord0[];
layout(location = 3) out vec4 outPositionNDC[];
layout(location = 4) out vec4 outPrevPositionNDC[];
layout(location = 5) out vec3 outNormalWorld[];
layout(location = 6) out vec4 outTangentWorldSign[];
// Usually less vertices than primitives and these are the same for even all the
// vertices, let alone all triangles that use a given vertex
layout(location = 7) out flat uint outDrawInstanceIndex[];
layout(location = 8) out flat uint outMeshletIndex[];

void writeTransformedVertex(
    DrawInstance instance, MeshletInstance meshletInstance,
    GeometryMetadata metadata, ModelInstanceTransforms trfn,
    uint globalVertexIndex, uint meshletVertexIndex)
{
    Vertex vertexModel = loadVertex(metadata, globalVertexIndex);
    Vertex vertexWorld = transform(vertexModel, trfn);

    outPositionWorld[meshletVertexIndex] = vertexWorld.Position;
    outTexCoord0[meshletVertexIndex] = vertexWorld.TexCoord0;

    vec4 posCam = camera.worldToCamera * vec4(vertexWorld.Position, 1);
    outZCam[meshletVertexIndex] = posCam.z;

    vec4 posNDC = camera.cameraToClip * posCam;
    outPositionNDC[meshletVertexIndex] = posNDC;

    ModelInstanceTransforms prevTrfn = trfn;
    if (PC.previousTransformValid == 1)
        prevTrfn = previousModelInstanceTransforms
                       .instance[instance.modelInstanceIndex];
    vec3 prevPositionWorld = worldPosition(vertexModel, prevTrfn);

    outPrevPositionNDC[meshletVertexIndex] = camera.previousCameraToClip *
                                             camera.previousWorldToCamera *
                                             vec4(prevPositionWorld, 1.);

    outNormalWorld[meshletVertexIndex] = vertexWorld.Normal;
    outTangentWorldSign[meshletVertexIndex] = vertexWorld.Tangent;

    outDrawInstanceIndex[meshletVertexIndex] =
        meshletInstance.drawInstanceIndex;
    outMeshletIndex[meshletVertexIndex] = meshletInstance.meshletIndex;

    gl_MeshVerticesEXT[meshletVertexIndex].gl_Position = posNDC;
}

void main()
{
    uint threadIndex = gl_LocalInvocationIndex;

    MeshletInstance meshletInstance =
        meshletInstances.instance[gl_WorkGroupID.x];
    DrawInstance instance =
        drawInstances.instance[meshletInstance.drawInstanceIndex];
    GeometryMetadata metadata = geometryMetadatas.data[instance.meshIndex];
    MeshletInfo meshletInfo =
        loadMeshletInfo(metadata, meshletInstance.meshletIndex);
    ModelInstanceTransforms trfn =
        modelInstanceTransforms.instance[instance.modelInstanceIndex];

    if (threadIndex == 0)
    {
        atomicAdd(drawStats.drawnMeshletCount, 1);
        atomicAdd(drawStats.rasterizedTriangleCount, meshletInfo.triangleCount);
    }

    SetMeshOutputsEXT(meshletInfo.vertexCount, meshletInfo.triangleCount);

    const uint verticesPerThread = (MAX_MS_VERTS - 1) / LOCAL_SIZE_X + 1;
    for (uint i = 0; i < verticesPerThread; ++i)
    {
        uint meshletVertexIndex = i * LOCAL_SIZE_X + threadIndex;
        if (meshletVertexIndex < meshletInfo.vertexCount)
        {
            uint vertexIndex = loadMeshletVertexIndex(
                metadata, meshletInfo, meshletVertexIndex);

            writeTransformedVertex(
                instance, meshletInstance, metadata, trfn, vertexIndex,
                meshletVertexIndex);
        }
    }

    const uint trianglesPerThread =
        roundedUpQuotient(MAX_MS_PRIMS, LOCAL_SIZE_X);
    for (uint i = 0; i < trianglesPerThread; ++i)
    {
        uint triangleIndex = i * LOCAL_SIZE_X + threadIndex;
        if (triangleIndex < meshletInfo.triangleCount)
        {
            gl_MeshPrimitivesEXT[triangleIndex].gl_PrimitiveID =
                int(triangleIndex);

            uvec3 triIndices =
                loadMeshletTriangle(metadata, meshletInfo, triangleIndex);
            gl_PrimitiveTriangleIndicesEXT[triangleIndex] = triIndices;

            // Per-triangle backface culling seemed to be 2-3% slower on 680M
            // and 4080 when implemented like in
            // https://zeux.io/2023/04/28/triangle-backface-culling/
            // or like in
            // https://github.com/zeux/niagara/blob/5c4da32850ae32a0528f11e22e09ada5348f4e0c/src/shaders/meshlet.mesh.glsl
        }
    }
}
