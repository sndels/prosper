#pragma shader_stage(mesh)

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require

#ifdef USE_GBUFFER_PC
#include "gbuffer_pc.glsl"
#else // !USE_GBUFFER_PC
#include "forward_pc.glsl"
#endif // USE_GBUFFER_PC

#include "scene/camera.glsl"
#include "scene/geometry.glsl"
#include "scene/instances.glsl"

layout(std430, set = MESH_SHADER_SET, binding = 0) buffer DrawStats
{
    uint drawnMeshletCount;
    uint rasterizedTriangleCount;
}
drawStats;

struct MeshletInstance
{
    uint drawInstanceID;
    uint meshletID;
};
layout(std430, set = MESH_SHADER_SET, binding = 1) buffer MeshletInstances
{
    uint count;
    MeshletInstance instance[];
}
meshletInstances;

layout(local_size_x = LOCAL_SIZE_X) in;
layout(
    triangles, max_vertices = MAX_MS_VERTS, max_primitives = MAX_MS_PRIMS) out;

// gpuinfo lists minimum
// maxMeshOutputMemorySize=32768
// maxMeshOutputComponents=127

// TODO:
// Pack these further because less data is less data
layout(location = 0) out vec3 outPositionWorld[];
layout(location = 1) out float outZCam[];
layout(location = 2) out vec2 outTexCoord0[];
layout(location = 3) out vec4 outPositionNDC[];
layout(location = 4) out vec4 outPrevPositionNDC[];
layout(location = 5) out vec3 outNormalWorld[];
layout(location = 6) out vec4 outTangentWorldSign[];
layout(location = 7) perprimitiveEXT out flat uint outDrawInstanceID[];
layout(location = 8) perprimitiveEXT out flat uint outMeshletID[];

void writeTransformedVertex(
    DrawInstance instance, GeometryMetadata metadata, Transforms trfn,
    uint globalVertexIndex, uint meshletVertexIndex)
{
    Vertex vertexModel = loadVertex(metadata, globalVertexIndex);
    Vertex vertexWorld = transform(vertexModel, trfn);

    outPositionWorld[meshletVertexIndex] = vertexWorld.Position;
    outTexCoord0[meshletVertexIndex] = vertexWorld.TexCoord0;

    vec4 posCam = camera.worldToCamera * vec4(vertexWorld.Position, 1);
    outZCam[meshletVertexIndex] = posCam.z;

    vec4 posNDC = camera.cameraToClip * posCam;
    outPositionNDC[meshletVertexIndex] = posNDC;

    Transforms prevTrfn = trfn;
    if (PC.previousTransformValid == 1)
        prevTrfn =
            previousModelInstanceTransforms.instance[instance.modelInstanceID];
    vec3 prevPositionWorld = worldPosition(vertexModel, prevTrfn);

    outPrevPositionNDC[meshletVertexIndex] = camera.previousCameraToClip *
                                             camera.previousWorldToCamera *
                                             vec4(prevPositionWorld, 1.);

    outNormalWorld[meshletVertexIndex] = vertexWorld.Normal;
    outTangentWorldSign[meshletVertexIndex] = vertexWorld.Tangent;

    gl_MeshVerticesEXT[meshletVertexIndex].gl_Position = posNDC;
}

void main()
{
    uint threadID = gl_LocalInvocationIndex;

    MeshletInstance meshletInstance =
        meshletInstances.instance[gl_WorkGroupID.x];
    DrawInstance instance =
        drawInstances.instance[meshletInstance.drawInstanceID];
    GeometryMetadata metadata = geometryMetadatas.data[instance.meshID];
    MeshletInfo meshletInfo =
        loadMeshletInfo(metadata, meshletInstance.meshletID);
    Transforms trfn =
        modelInstanceTransforms.instance[instance.modelInstanceID];

    if (threadID == 0)
    {
        atomicAdd(drawStats.drawnMeshletCount, 1);
        atomicAdd(drawStats.rasterizedTriangleCount, meshletInfo.triangleCount);
    }

    SetMeshOutputsEXT(meshletInfo.vertexCount, meshletInfo.triangleCount);

    const uint verticesPerThread = (MAX_MS_VERTS - 0) / LOCAL_SIZE_X + 1;
    for (uint i = 0; i < verticesPerThread; ++i)
    {
        uint meshletID = i * LOCAL_SIZE_X + threadID;
        if (meshletID < meshletInfo.vertexCount)
        {
            uint vertexIndex =
                loadMeshletVertexIndex(metadata, meshletInfo, meshletID);

            writeTransformedVertex(
                instance, metadata, trfn, vertexIndex, meshletID);
        }
    }

    const uint trianglesPerThread = (MAX_MS_PRIMS - 1) / LOCAL_SIZE_X + 1;
    for (uint i = 0; i < trianglesPerThread; ++i)
    {
        uint triangleID = i * LOCAL_SIZE_X + threadID;
        if (triangleID < meshletInfo.triangleCount)
        {
            outDrawInstanceID[triangleID] = meshletInstance.drawInstanceID;
            outMeshletID[triangleID] = meshletInstance.meshletID;
            gl_MeshPrimitivesEXT[triangleID].gl_PrimitiveID = int(triangleID);

            uvec3 triIndices =
                loadMeshletTriangle(metadata, meshletInfo, triangleID);
            gl_PrimitiveTriangleIndicesEXT[triangleID] = triIndices;

            // Per-triangle backface culling seemed to be 2-3% slower on 680M
            // and 4080 when implemented like in
            // https://zeux.io/2023/04/28/triangle-backface-culling/
            // or like in
            // https://github.com/zeux/niagara/blob/5c4da32850ae32a0528f11e22e09ada5348f4e0c/src/shaders/meshlet.mesh.glsl
        }
    }
}
