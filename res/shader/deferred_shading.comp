#pragma shader_stage(compute)

#extension GL_GOOGLE_include_directive : require

#include "brdf.glsl"
#include "camera.glsl"
#include "debug.glsl"
#include "light_clusters.glsl"
#include "lighting.glsl"
#include "lights.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = STORAGE_SET, binding = 0, rgba8) uniform readonly image2D
    inAlbedoRoughness;
layout(set = STORAGE_SET, binding = 1, rgba16) uniform readonly image2D
    inNormalMetallic;
layout(set = STORAGE_SET, binding = 2) uniform texture2D inNonLinearDepth;
layout(set = STORAGE_SET, binding = 3, rgba16f) uniform image2D outColor;
layout(set = STORAGE_SET, binding = 4) uniform sampler depthSampler;

layout(push_constant) uniform DeferredShadingPC { uint DrawType; }
PC;

void main()
{
    ivec2 res = imageSize(outColor);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, res)))
    {
        return;
    }
    vec2 uv = vec2(coord) / vec2(res);

    vec4 albedoRoughness = imageLoad(inAlbedoRoughness, coord);
    vec4 normalMetallic = imageLoad(inNormalMetallic, coord);

    float nonLinearDepth =
        texelFetch(sampler2D(inNonLinearDepth, depthSampler), coord, 0).x;
    float viewDepth = linearizeDepth(nonLinearDepth);

    VisibleSurface surface;
    surface.positionWS = worldPos(uv, nonLinearDepth);
    surface.invViewRayWS = normalize(camera.eye.xyz - surface.positionWS);
    surface.material = loadFromGbuffer(albedoRoughness, normalMetallic);
    surface.normalWS = surface.material.normal;
    surface.NoV = saturate(dot(surface.normalWS, surface.invViewRayWS));

    vec3 color = vec3(0);

    color += evalDirectionalLight(surface);

    LightClusterInfo lightInfo = unpackClusterPointer(uvec2(coord), viewDepth);

    color += evalPointLights(surface, lightInfo);

    color += evalSpotLights(surface, lightInfo);

    if (PC.DrawType >= DrawType_PrimitiveID)
    {
        DebugInputs di;
        di.meshID = 0;      // TODO
        di.primitiveID = 0; // TODO
        di.materialID = 0;  // TODO
        di.position = surface.positionWS;
        di.shadingNormal = surface.normalWS;
        di.texCoord0 = vec2(0); // TODO
        imageStore(
            outColor, coord,
            vec4(commonDebugDraw(PC.DrawType, di, surface.material), 1));
        return;
    }

    imageStore(outColor, coord, vec4(color, 1));
}
