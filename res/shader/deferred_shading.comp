#pragma shader_stage(compute)

#extension GL_GOOGLE_include_directive : require

#include "camera.glsl"
#include "debug.glsl"
#include "light_clusters.glsl"
#include "lights.glsl"
#include "material.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = STORAGE_SET, binding = 0, rgba8) uniform readonly image2D
    inAlbedoRoughness;
layout(set = STORAGE_SET, binding = 1, rgba16) uniform readonly image2D
    inNormalMetallic;
layout(set = STORAGE_SET, binding = 2) uniform texture2D inNonLinearDepth;
layout(set = STORAGE_SET, binding = 3, rgba16f) uniform image2D outColor;
layout(set = STORAGE_SET, binding = 4) uniform sampler depthSampler;

layout(push_constant) uniform DeferredShadingPC { uint DrawType; }
PC;

void main()
{
    ivec2 res = imageSize(outColor);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, res)))
    {
        return;
    }
    vec2 uv = vec2(coord) / vec2(res);

    vec4 albedoRoughness = imageLoad(inAlbedoRoughness, coord);
    vec4 normalMetallic = imageLoad(inNormalMetallic, coord);

    float nonLinearDepth =
        texelFetch(sampler2D(inNonLinearDepth, depthSampler), coord, 0).x;
    float viewDepth = linearizeDepth(nonLinearDepth);
    vec3 surfacePos = worldPos(uv, nonLinearDepth);

    Material material = loadFromGbuffer(albedoRoughness, normalMetallic);

    vec3 v = normalize(camera.eye.xyz - surfacePos);
    vec3 normal = material.normal;

    vec3 color = vec3(0);
    {
        vec3 l = -normalize(directionalLight.direction.xyz);
        color +=
            directionalLight.irradiance.xyz * evalBRDF(normal, v, l, material);
    }

    uvec3 ci = clusterIndex(uvec2(coord), viewDepth);

    uint clusterIndexOffset, pointCount, spotCount;
    unpackClusterPointer(ci, clusterIndexOffset, pointCount, spotCount);

    for (uint i = 0; i < pointCount; ++i)
    {
        uint index = imageLoad(lightIndices, int(clusterIndexOffset + i)).x;
        PointLight light = pointLights.lights[index];
        vec3 pos = light.position.xyz;
        vec3 radiance = light.radianceAndRadius.xyz;
        float radius = light.radianceAndRadius.w;

        vec3 toLight = pos - surfacePos;
        float d2 = dot(toLight, toLight);
        float d = sqrt(d2);

        vec3 l = toLight / d;

        float dPerR = d / radius;
        float dPerR2 = dPerR * dPerR;
        float dPerR4 = dPerR2 * dPerR2;
        float attenuation = max(min(1.0 - dPerR4, 1), 0) / d2;

        color += radiance * attenuation * evalBRDF(normal, v, l, material);
    }

    for (uint i = 0; i < spotCount; ++i)
    {
        uint index =
            imageLoad(lightIndices, int(clusterIndexOffset + pointCount + i)).x;
        SpotLight light = spotLights.lights[index];
        vec3 toLight = light.positionAndAngleOffset.xyz - surfacePos;
        float d2 = dot(toLight, toLight);
        vec3 l = toLight / sqrt(d2);

        // Angular attenuation rom gltf spec
        float cd = dot(-light.direction.xyz, l);
        float angularAttenuation = saturate(
            cd * light.radianceAndAngleScale.w +
            light.positionAndAngleOffset.w);
        angularAttenuation *= angularAttenuation;

        color += angularAttenuation * light.radianceAndAngleScale.xyz *
                 evalBRDF(normal, v, l, material) / d2;
    }

    if (PC.DrawType >= DrawType_PrimitiveID)
    {
        DebugInputs di;
        di.meshID = 0;      // TODO
        di.primitiveID = 0; // TODO
        di.materialID = 0;  // TODO
        di.position = surfacePos;
        di.shadingNormal = normal;
        di.texCoord0 = vec2(0); // TODO
        imageStore(
            outColor, coord,
            vec4(commonDebugDraw(PC.DrawType, di, material), 1));
        return;
    }

    imageStore(outColor, coord, vec4(color, 1));
}
