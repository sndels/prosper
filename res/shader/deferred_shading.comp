#pragma shader_stage(compute)

#extension GL_EXT_shader_image_load_formatted : require

#include "brdf.glsl"
#include "debug.glsl"
#include "scene/camera.glsl"
#include "scene/light_clusters.glsl"
#include "scene/lighting.glsl"
#include "scene/lights.glsl"
#include "scene/skybox.glsl"

layout(set = STORAGE_SET, binding = 0) uniform readonly image2D
    inAlbedoRoughness;
layout(set = STORAGE_SET, binding = 1) uniform readonly image2D
    inNormalMetallic;
layout(set = STORAGE_SET, binding = 2) uniform readonly image2D
    inGeometryNormal;
layout(set = STORAGE_SET, binding = 3) uniform texture2D inNonLinearDepth;
layout(set = STORAGE_SET, binding = 4) uniform image2D outColor;
layout(set = STORAGE_SET, binding = 5) uniform sampler depthSampler;

layout(push_constant) uniform DeferredShadingPC
{
    uint DrawType;
    uint ibl;
}
PC;

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    ivec2 res = imageSize(outColor);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, res)))
    {
        return;
    }
    vec2 uv = vec2(coord) / vec2(res);

    float nonLinearDepth =
        texelFetch(sampler2D(inNonLinearDepth, depthSampler), coord, 0).x;

    VisibleSurface surface;
    surface.positionWS = worldPos(uv, nonLinearDepth);
    surface.invViewRayWS = normalize(camera.eye.xyz - surface.positionWS);
    surface.material =
        loadFromGbuffer(coord, inAlbedoRoughness, inNormalMetallic);
    surface.normalWS = surface.material.normal;
    surface.geometryNormalWS =
        signedOctDecode(imageLoad(inGeometryNormal, coord).xyw);
    surface.uv = vec2(0);
    surface.NoV = saturate(dot(surface.normalWS, surface.invViewRayWS));
    surface.linearDepth = linearizeDepth(nonLinearDepth);

    vec3 color = vec3(0);

    color += evalDirectionalLight(surface);

    LightClusterInfo lightInfo =
        unpackClusterPointer(uvec2(coord), surface.linearDepth);

    color += evalPointLights(surface, lightInfo);

    color += evalSpotLights(surface, lightInfo);

    if (PC.ibl == 1)
        color += evalIBL(surface);

    if (PC.DrawType != DrawType_Default)
    {
        if (PC.DrawType == DrawType_Position)
        {
            DebugInputs di;
            di.position = surface.positionWS;
            imageStore(
                outColor, coord,
                vec4(commonDebugDraw(PC.DrawType, di, surface.material), 1));
        }
        else
        {
            // GBuffer pass stores debug output in albedo
            imageStore(outColor, coord, vec4(surface.material.albedo, 1));
        }
        return;
    }

    imageStore(outColor, coord, vec4(color, 1));
}
