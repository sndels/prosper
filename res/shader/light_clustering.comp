#version 450
#pragma shader_stage(compute)

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : require

#define LIGHTS_SET 0
#include "lights.glsl"

#define CAMERA_SET 1
#include "camera.glsl"

#define LIGHT_CLUSTERS_SET 2
#define WRITE_CULLING_BINDS
#include "light_clusters.glsl"

layout(
    local_size_x = LIGHT_CLUSTER_DIMENSION,
    local_size_y = LIGHT_CLUSTER_DIMENSION) in;

layout(push_constant) uniform ClusteringPC { uvec2 resolution; }
clusteringPC;

const uint maxPointIndices = 128;
const uint maxSpotIndices = 128;

shared uint pointCount;
shared uint pointIndices[maxPointIndices];
shared uint spotCount;
shared uint spotIndices[maxPointIndices];
shared uint clusterIndexOffset;

struct Sphere
{
    vec3 p;
    float r;
};

struct Frustum
{
    vec4 planes[6];
};

float signedDistance(vec4 plane, vec3 p) { return dot(plane, vec4(p, -1)); }

bool intersect(Sphere s, Frustum f)
{
    // TODO: Bf3 culling slides unrolled this to do two sphere intersections at
    // a time vectorized (Daniel Collin, Culling the Battlefield)
    bool intersects = true;
    [[unroll]] for (int i = 0; i < 6; ++i)
    {
        intersects = intersects && signedDistance(f.planes[i], s.p) >= -s.r;
    }
    return intersects;
}

bool isPointVisible(uint i, Frustum f)
{
    PointLight point = pointLights.lights[i];

    Sphere s;
    s.p = (camera.worldToCamera * point.position).xyz;
    s.r = point.radianceAndRadius.w;

    return intersect(s, f);
}

bool isSpotVisible(uint i, Frustum Frustum)
{
    // TODO
    return true;
}

Frustum clusterFrustum(uvec3 cluster)
{
    // Ported from Intel's
    // Deferred Rendering for Current and Future Rendering Pipelines
    // License at the end of this file

    // Work out scale/bias from [0, 1]
    vec2 tileScale =
        vec2(camera.resolution) / float(2 * LIGHT_CLUSTER_DIMENSION);
    vec2 tileBias = tileScale - vec2(cluster);

    // Now work out composite projection matrix
    // Relevant matrix columns for this tile frusta
    vec4 c1 = vec4(camera.cameraToClip[0][0] * tileScale.x, 0, -tileBias.x, 0);
    // SS: Our projection Y is already flipped
    vec4 c2 = vec4(0, camera.cameraToClip[1][1] * tileScale.y, -tileBias.y, 0);
    vec4 c4 = vec4(0, 0, -1, 0);

    // Derive frustum planes
    Frustum f;
    // Sides
    f.planes[0] = c4 - c1;
    f.planes[1] = c4 + c1;
    f.planes[2] = c4 - c2;
    f.planes[3] = c4 + c2;
    // Near/far
    if (cluster.z == 0)
        f.planes[4] = vec4(0, 0, -1, 0);
    else
        f.planes[4] = vec4(0, 0, -1, sliceStart(cluster.z));
    f.planes[5] = vec4(0, 0, 1, -sliceStart(cluster.z + 1));

    // Normalize frustum planes (near/far already normalized)
    [[unroll]] for (uint i = 0; i < 4; ++i)
    {
        f.planes[i] /= length(f.planes[i].xyz);
    }

    return f;
}

void main()
{
    uvec3 cluster = gl_WorkGroupID.xyz;
    uvec2 clusterCorner = cluster.xy * LIGHT_CLUSTER_DIMENSION;
    if (all(greaterThanEqual(clusterCorner, clusteringPC.resolution)))
        return;

    uint localIndex = gl_LocalInvocationIndex;
    bool leadThread = localIndex == 0;

    if (leadThread)
    {
        pointCount = 0;
        spotCount = 0;
    }
    // Only barrier() since only pointCount/spotCount sync is required
    barrier();

    // TODO: Split into a separate compute pass to fill the data?
    //       Get from CPU instead?
    Frustum f = clusterFrustum(cluster);

    uint groupThreads = gl_WorkGroupSize.x * gl_WorkGroupSize.y;

    {
        uint totalPoints = pointLights.count;
        uint threadPoints = (totalPoints - 1) / groupThreads + 1;
        for (uint i = 0; i < threadPoints; ++i)
        {
            uint pi = localIndex * threadPoints + i;
            if (pi >= totalPoints)
                break;

            if (isPointVisible(pi, f))
            {
                uint writeIndex = atomicAdd(pointCount, 1);
                pointIndices[writeIndex] = pi;
            }
        }

        uint totalSpots = spotLights.count;
        uint threadSpots = (totalSpots - 1) / groupThreads + 1;
        for (uint i = 0; i < threadSpots; ++i)
        {
            uint si = localIndex * threadSpots + i;
            if (si >= totalSpots)
                break;

            if (isSpotVisible(si, f))
            {
                uint writeIndex = atomicAdd(spotCount, 1);
                spotIndices[writeIndex] = si;
            }
        }
    }
    // Only barrier() since only pointCount/spotCount sync is required
    barrier();

    if (leadThread)
    {
        uint lightCount = pointCount + spotCount;
        if (lightCount > 0)
            clusterIndexOffset =
                imageAtomicAdd(lightIndicesCount, 0, lightCount);
        else
            clusterIndexOffset = 0;

        imageStore(
            clusterPointers, ivec3(cluster),
            packClusterPointer(clusterIndexOffset, pointCount, spotCount));
    }
    // Only barrier() since only clusterIndexOffset sync is required
    barrier();

    uint threadPoints = (pointCount - 1) / groupThreads + 1;
    for (uint i = 0; i < threadPoints; ++i)
    {
        uint index = localIndex * threadPoints + i;
        if (index >= pointCount)
            break;
        imageStore(
            lightIndices, int(clusterIndexOffset + index),
            uvec4(pointIndices[index], 0, 0, 0));
    }

    uint threadSpots = (spotCount - 1) / groupThreads + 1;
    for (uint i = 0; i < threadSpots; ++i)
    {
        uint index = localIndex * threadSpots + i;
        if (index >= spotCount)
            break;
        imageStore(
            lightIndices, int(clusterIndexOffset + pointCount + index),
            uvec4(spotIndices[index], 0, 0, 0));
    }
}

// Frustum creation
// Copyright 2010 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works
// of this software for any purpose and without fee, provided, that the above
// copyright notice and this statement appear in all copies.  Intel makes no
// representations about the suitability of this software for any purpose.  THIS
// SOFTWARE IS PROVIDED "AS IS." INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES,
// EXPRESS OR IMPLIED, AND ALL LIABILITY, INCLUDING CONSEQUENTIAL AND OTHER
// INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE, INCLUDING LIABILITY FOR
// INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not assume
// any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
