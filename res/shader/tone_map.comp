#pragma shader_stage(compute)

#extension GL_EXT_shader_image_load_formatted : require

#include "common/math.glsl"
#include "shared/shader_structs/push_constants/tone_map.h"

layout(push_constant) uniform PushConstants { ToneMapPC PC; };

layout(binding = 0) uniform readonly image2D inColor;
layout(binding = 1) uniform texture3D inLut;
layout(binding = 2) uniform sampler inLutSampler;
layout(binding = 3) uniform image2D outColor;

// From https://github.com/h3r2tic/tony-mc-mapface
// Under MIT
vec3 tonyMcMapface(vec3 stimulus)
{
    // Apply a non-linear transform that the LUT is encoded with.
    const vec3 encoded = stimulus / (stimulus + 1.0);

    // Align the encoded range to texel centers.
    const float LUT_DIMS = 48.0;
    vec3 uv = encoded * ((LUT_DIMS - 1.0) / LUT_DIMS) + 0.5 / LUT_DIMS;

    return textureLod(sampler3D(inLut, inLutSampler), uv, 0).xyz;
}

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    ivec2 res = imageSize(inColor);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, res)))
    {
        return;
    }

    vec3 color = imageLoad(inColor, coord).xyz;

    // Exposure before contrast to keep the usable exposure values from
    // exploding with high contrast
    color *= PC.exposure;

    vec3 hsv = rgbToHsv(color);

    // TODO:
    // A nicer contrast function? Though, adding a shoulder moves into
    // tonemapper territory and into Tony McMapface's turf.
    hsv.b = pow(hsv.b, PC.contrast);

    color = hsvToRgb(hsv);

    color = tonyMcMapface(color);

    // Apply the inverse sRGB EOTF as we expect to write into a unorm target
    float gamma = 2.2;
    color = pow(color, vec3(1. / gamma));

    imageStore(outColor, coord, vec4(color, 1));
}
