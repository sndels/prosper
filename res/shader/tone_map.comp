#pragma shader_stage(compute)

#extension GL_EXT_shader_image_load_formatted : require

layout(push_constant) uniform ToneMapPC
{
    float exposure;
    uint zoom;
}
PC;

layout(binding = 0) uniform readonly image2D inColor;
layout(binding = 1) uniform texture3D inLut;
layout(binding = 2) uniform sampler inLutSampler;
layout(binding = 3) uniform image2D outColor;

// From https://github.com/h3r2tic/tony-mc-mapface
// Under MIT
vec3 tony_mc_mapface(vec3 stimulus)
{
    // Apply a non-linear transform that the LUT is encoded with.
    const vec3 encoded = stimulus / (stimulus + 1.0);

    // Align the encoded range to texel centers.
    const float LUT_DIMS = 48.0;
    vec3 uv = encoded * ((LUT_DIMS - 1.0) / LUT_DIMS) + 0.5 / LUT_DIMS;

    return textureLod(sampler3D(inLut, inLutSampler), uv, 0).xyz;
}

vec3 tonemap(vec3 color)
{
    float gamma = 2.2;
    vec3 outColor = tony_mc_mapface(color * PC.exposure);
    return pow(outColor, vec3(1 / gamma));
}

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    ivec2 res = imageSize(inColor);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, res)))
    {
        return;
    }

    ivec2 inCoord = coord;
    if (PC.zoom == 1)
    {
        // Zoom in a quarter res windoe approximately at the center of the full
        // render view
        ivec2 center = res / 2;
        ivec2 topLeft = center - res / 8;
        inCoord = topLeft + coord / 4;
    }

    vec3 color = imageLoad(inColor, inCoord).xyz;
    imageStore(outColor, coord, vec4(tonemap(color), 1));
}
