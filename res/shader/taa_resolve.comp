#pragma shader_stage(compute)

// Based on
// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/
// and
// https://alextardif.com/TAA.html

#include "common/math.glsl"
#include "scene/camera.glsl"

layout(push_constant) uniform TaaResolvePC { uint flags; }
PC;

bool flagIgnoreHistory() { return bitfieldExtract(PC.flags, 0, 1) == 1; }
bool flagCatmullRom() { return bitfieldExtract(PC.flags, 1, 1) == 1; }
bool flagLargestVelocity() { return bitfieldExtract(PC.flags, 2, 1) == 1; }
uint flagColorClippingType() { return bitfieldExtract(PC.flags, 3, 2); }

layout(set = STORAGE_SET, binding = 0) uniform texture2D inIllumination;
layout(set = STORAGE_SET, binding = 1) uniform texture2D inPreviousResolved;
layout(set = STORAGE_SET, binding = 2) uniform texture2D inVelocity;
layout(set = STORAGE_SET, binding = 3, rgba8) uniform writeonly image2D
    outResolved;
layout(set = STORAGE_SET, binding = 4) uniform sampler nearestSampler;
layout(set = STORAGE_SET, binding = 5) uniform sampler bilinearSampler;

vec3 minMaxClip(ivec2 px, ivec2 res, vec3 previousResolved)
{
    vec3 minColor = vec3(9999.);
    vec3 maxColor = vec3(-9999.);

    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            vec2 uv = (px + vec2(x, y) + .5) / vec2(res);
            vec3 color =
                texture(sampler2D(inIllumination, nearestSampler), uv).xyz;
            minColor = min(minColor, color);
            maxColor = max(maxColor, color);
        }
    }

    return clamp(previousResolved, minColor, maxColor);
}

// From An Excursion in Temporal Supersampling
// by Marco Salvi
vec3 varianceClip(ivec2 px, ivec2 res, vec3 previousResolved)
{
    int N = 9;
    vec3 m1 = vec3(0);
    vec3 m2 = vec3(0);
    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            vec2 uv = (px + vec2(x, y) + .5) / vec2(res);
            vec3 color =
                texture(sampler2D(inIllumination, nearestSampler), uv).xyz;
            m1 += color;
            m2 += color * color;
        }
    }
    vec3 mu = m1 / N;
    vec3 sigma = sqrt(m2 / N - mu * mu);
    float gamma = 1.;
    vec3 minColor = mu - gamma * sigma;
    vec3 maxColor = mu + gamma * sigma;

    return clamp(previousResolved, minColor, maxColor);
}

vec3 clipColor(ivec2 px, ivec2 res, vec3 previousResolved)
{
    uint colorClipping = flagColorClippingType();
    if (colorClipping == ColorClipping_None)
        return previousResolved;
    if (colorClipping == ColorClipping_MinMax)
        return minMaxClip(px, res, previousResolved);
    if (colorClipping == ColorClipping_Variance)
        return varianceClip(px, res, previousResolved);
    return vec3(0);
}

#define samplePrevious(tex, uv) texture(sampler2D(tex, bilinearSampler), uv).xyz

// From Filmic SMAA: Sharp Morphological and Temporal Antialiasing
// By Jorge Jimenez
vec3 optimizedCatmullRom(vec2 uv, ivec2 res)
{
    vec4 rtMetrics = vec4(1. / vec2(res), vec2(res));
    vec2 position = uv * rtMetrics.zw;
    vec2 centerPosition = floor(position - .5) + .5;
    vec2 f = position - centerPosition;
    vec2 f2 = f * f;
    vec2 f3 = f * f2;

    // Any higher than this causes visible posterization artifacts when clipping
    // is not used
    float sharpness = 70.;
    float c = sharpness / 100.;
    vec2 w0 = -c * f3 + 2. * c * f2 - c * f;
    vec2 w1 = (2. - c) * f3 - (3. - c) * f2 + 1;
    vec2 w2 = -(2. - c) * f3 + (3. - 2. * c) * f2 + c * f;
    vec2 w3 = c * f3 - c * f2;

    vec2 w12 = w1 + w2;
    vec2 tc12 = rtMetrics.xy * (centerPosition + w2 / w12);
    vec3 centerColor = samplePrevious(inPreviousResolved, vec2(tc12.x, tc12.y));

    vec2 tc0 = rtMetrics.xy * (centerPosition - 1.);
    vec2 tc3 = rtMetrics.xy * (centerPosition + 2.);

    vec4 color =
        vec4(samplePrevious(inPreviousResolved, vec2(tc12.x, tc0.y)), 1.) *
            (w12.x * w0.y) +
        vec4(samplePrevious(inPreviousResolved, vec2(tc0.x, tc12.y)), 1.) *
            (w0.x * w12.y) +
        vec4(centerColor, 1.) * (w12.x * w12.y) +
        vec4(samplePrevious(inPreviousResolved, vec2(tc3.x, tc12.y)), 1.) *
            (w3.x * w12.y) +
        vec4(samplePrevious(inPreviousResolved, vec2(tc12.x, tc3.y)), 1.) *
            (w12.x * w3.y);

    return color.rgb / color.a;
}

vec2 largestVelocity(ivec2 px, ivec2 res)
{
    vec2 invRes = 1. / vec2(res);
    float retLenSqr = 0.;
    vec2 ret = vec2(0);
    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            vec2 uv = (vec2(px + ivec2(x, y)) + .5) * invRes;
            vec2 velocity =
                texture(sampler2D(inVelocity, nearestSampler), uv).xy;
            float lenSqr = dot(velocity, velocity);
            if (retLenSqr < lenSqr)
            {
                ret = velocity;
                retLenSqr = lenSqr;
            }
        }
    }

    return ret;
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 res = imageSize(outResolved);
    ivec2 px = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(px, res)))
    {
        return;
    }
    vec2 uv = (vec2(px) + .5) / vec2(res);

    vec3 illumination =
        texture(sampler2D(inIllumination, nearestSampler), uv).xyz;

    if (flagIgnoreHistory())
    {
        imageStore(outResolved, px, vec4(illumination, 1));
        return;
    }

    vec2 velocity = flagLargestVelocity()
                        ? largestVelocity(px, res)
                        : texture(sampler2D(inVelocity, nearestSampler), uv).xy;

    vec2 reprojectedUv = uv - velocity * vec2(.5, -.5);

    if (any(notEqual(reprojectedUv, saturate(reprojectedUv))))
    {
        imageStore(outResolved, px, vec4(illumination, 1));
        return;
    }

    // Samples don't fall exactly to texel centers so can't use nearest here.
    // That would cause swimming artifacts in movement.
    vec3 previousResolved =
        flagCatmullRom() ? optimizedCatmullRom(reprojectedUv, res)
                         : samplePrevious(inPreviousResolved, reprojectedUv);
    previousResolved = clipColor(px, res, previousResolved);

    float alpha = 0.1;
    vec3 resolved = illumination * alpha + previousResolved * (1. - alpha);

    imageStore(outResolved, px, vec4(resolved, 1));
}
