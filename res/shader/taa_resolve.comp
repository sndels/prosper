#pragma shader_stage(compute)

// Based on
// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/
// and
// https://alextardif.com/TAA.html

#include "common/math.glsl"
#include "scene/camera.glsl"

layout(push_constant) uniform TaaResolvePC
{
    uint ignoreHistory;
    uint colorClipping;
}
PC;

layout(set = STORAGE_SET, binding = 0) uniform texture2D inIllumination;
layout(set = STORAGE_SET, binding = 1) uniform texture2D inPreviousResolved;
layout(set = STORAGE_SET, binding = 2, rg16_snorm) uniform readonly image2D
    inVelocity;
layout(set = STORAGE_SET, binding = 3, rgba8) uniform writeonly image2D
    outResolved;
layout(set = STORAGE_SET, binding = 4) uniform sampler nearestSampler;
layout(set = STORAGE_SET, binding = 5) uniform sampler bilinearSampler;

vec3 minMaxClip(ivec2 px, ivec2 res, vec3 previousResolved)
{
    vec3 minColor = vec3(9999.);
    vec3 maxColor = vec3(-9999.);

    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            vec2 uv = (px + vec2(x, y) + .5) / vec2(res);
            vec3 color =
                texture(sampler2D(inIllumination, nearestSampler), uv).xyz;
            minColor = min(minColor, color);
            maxColor = max(maxColor, color);
        }
    }

    return clamp(previousResolved, minColor, maxColor);
}

// From An Excursion in Temporal Supersampling
// by Marco Salvi
vec3 varianceClip(ivec2 px, ivec2 res, vec3 previousResolved)
{
    int N = 9;
    vec3 m1 = vec3(0);
    vec3 m2 = vec3(0);
    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            vec2 uv = (px + vec2(x, y) + .5) / vec2(res);
            vec3 color =
                texture(sampler2D(inIllumination, nearestSampler), uv).xyz;
            m1 += color;
            m2 += color * color;
        }
    }
    vec3 mu = m1 / N;
    vec3 sigma = sqrt(m2 / N - mu * mu);
    float gamma = 1.;
    vec3 minColor = mu - gamma * sigma;
    vec3 maxColor = mu + gamma * sigma;

    return clamp(previousResolved, minColor, maxColor);
}

vec3 clipColor(ivec2 px, ivec2 res, vec3 previousResolved)
{
    if (PC.colorClipping == ColorClipping_None)
        return previousResolved;
    if (PC.colorClipping == ColorClipping_MinMax)
        return minMaxClip(px, res, previousResolved);
    if (PC.colorClipping == ColorClipping_Variance)
        return varianceClip(px, res, previousResolved);
    return vec3(0);
}

layout(local_size_x = 16, local_size_y = 16) in;
void main()
{
    ivec2 res = imageSize(outResolved);
    ivec2 px = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(px, res)))
    {
        return;
    }
    vec2 uv = (vec2(px) + .5) / vec2(res);

    vec3 illumination =
        texture(sampler2D(inIllumination, nearestSampler), uv).xyz;

    if (PC.ignoreHistory == 1)
    {
        imageStore(outResolved, px, vec4(illumination, 1));
        return;
    }

    vec2 velocity = imageLoad(inVelocity, px).xy;

    vec2 reprojectedUv = uv - velocity * vec2(.5, -.5);

    if (any(notEqual(reprojectedUv, saturate(reprojectedUv))))
    {
        imageStore(outResolved, px, vec4(illumination, 1));
        return;
    }

    // Samples don't fall exactly to texel centers so can't use nearest here.
    // That would cause swimming artifacts in movement.
    // TODO: Catmull-Rom like UE4 and Jimenez
    vec3 previousResolved =
        texture(sampler2D(inPreviousResolved, bilinearSampler), reprojectedUv)
            .xyz;
    previousResolved = clipColor(px, res, previousResolved);

    float alpha = 0.1;
    vec3 resolved = illumination * alpha + previousResolved * (1. - alpha);

    imageStore(outResolved, px, vec4(resolved, 1));
}
