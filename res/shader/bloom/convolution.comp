#pragma shader_stage(compute)

#extension GL_EXT_shader_image_load_formatted : require

#include "../common/math.glsl"
#include "../shared/shader_structs/push_constants/bloom/convolution.h"

layout(set = 0, binding = 0) uniform image2D inOutHighlightsDft;
layout(set = 0, binding = 1) uniform readonly image2D inKernelDft;

layout(push_constant) uniform PushConstants { ConvolutionPC PC; };

vec4 mulComplex(vec4 a, vec4 b)
{
    return vec4(
        a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x, a.z * b.z - a.w * b.w,
        a.z * b.w + a.w * b.z);
}

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    // No bounds checks, CPU side ensures output is divisible by the group size
    ivec2 p = ivec2(gl_GlobalInvocationID.xy);

    uint n = imageSize(inOutHighlightsDft).x;

    vec4 highlights = imageLoad(inOutHighlightsDft, p);
    vec4 kernel = imageLoad(inKernelDft, p);

    vec4 convolved = mulComplex(highlights, kernel) * PC.scale;

    imageStore(inOutHighlightsDft, p, convolved);
}
