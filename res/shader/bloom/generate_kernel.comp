#pragma shader_stage(compute)

#include "../common/math.glsl"
#include "../shared/shader_structs/push_constants/bloom/generate_kernel.h"

layout(set = 0, binding = 0) uniform writeonly image2D outKernel;

layout(push_constant) uniform PushConstants { GenerateKernelPC PC; };

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    // No bounds checks, CPU side ensures output is divisible by the group size

    vec3 outValue = vec3(0);

    vec2 uv = gl_GlobalInvocationID.xy * PC.invRenderResolution;
    if (all(lessThan(uv, vec2(1))))
    {
        vec2 p = uv * 2. - 1.;
        outValue = vec3(saturate(1 - length(p) * 10.));
        outValue.b += .8 * saturate(1. - abs(p.y) * 10. - abs(p.x));
    }

    imageStore(outKernel, ivec2(gl_GlobalInvocationID.xy), vec4(outValue, 1));
}
