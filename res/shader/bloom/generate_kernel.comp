#pragma shader_stage(compute)

#include "../common/math.glsl"
#include "../shared/shader_structs/push_constants/bloom/generate_kernel.h"

layout(set = 0, binding = 0) uniform writeonly image2D outKernel;

layout(push_constant) uniform PushConstants { GenerateKernelPC PC; };

float gaussian(float x, float a, float b, float c)
{
    return a * exp(-(x - b * b) / (2 * c * c));
}

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    ivec2 outRes = imageSize(outKernel);
    // No bounds checks, CPU side ensures output is divisible by the group size

    // Center the kernel at the corners and wrap it because that's what gets us
    // a proper convolution it seems.
    vec2 p = gl_GlobalInvocationID.xy / vec2(outRes);
    p = p * 2. - 1.;
    p.x = abs(p.x);
    p.y = abs(p.y);

    vec3 outValue = vec3(gaussian(length(p - vec2(1., 1.)) * 100., .5, 1., 1.));
    if (abs(p.y) > .99)
        outValue += vec3(.01, .01, .5) *
                    gaussian(length(p - vec2(1., 1.)) * 10., .5, 1., 1.);

    imageStore(outKernel, ivec2(gl_GlobalInvocationID.xy), vec4(outValue, 1));
}
