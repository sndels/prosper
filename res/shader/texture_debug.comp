
#pragma shader_stage(compute)

#extension GL_EXT_shader_image_load_formatted : require

#include "common/math.glsl"

layout(binding = 0) uniform texture2D inColor;
layout(binding = 1) uniform writeonly image2D outColor;
layout(binding = 2) uniform sampler inSampler;
layout(binding = 3) uniform sampler nearestSampler;
layout(std430, binding = 4) buffer Color { vec4 color; }
outPeekColor;

layout(push_constant) uniform TextureDebugPC
{
    ivec2 inRes;
    ivec2 outRes;

    vec2 range;
    uint lod;
    uint flags;

    vec2 cursorUv;
}
PC;

uint flagChannelType() { return bitfieldExtract(PC.flags, 0, 3); }
bool flagAbsBeforeRange() { return bitfieldExtract(PC.flags, 3, 1) == 1; }
bool flagZoom() { return bitfieldExtract(PC.flags, 4, 1) == 1; }
bool flagMagnifier() { return bitfieldExtract(PC.flags, 5, 1) == 1; }

vec2 zoom4xUv(vec2 uv) { return uv * .25 + .375; }
vec2 unzoom4xUv(vec2 uv) { return (uv - .375) * 4.; }

ivec2 inRes() { return max(PC.inRes / (1 << PC.lod), ivec2(1)); }

vec2 aspectCorrectedUv(vec2 uv)
{
    vec2 outCoord = uv * PC.outRes;
    float inAspectRatio = float(inRes().x) / float(inRes().y);
    float outAspectRatio = float(PC.outRes.x) / float(PC.outRes.y);
    if (!any(equal(inRes(), PC.outRes)))
    {
        if (inAspectRatio > outAspectRatio)
        {
            // Scale limited by height
            float scaledHeight = PC.outRes.x / inAspectRatio;
            float bottomRow = (PC.outRes.y - scaledHeight) / 2;
            uv.y = (outCoord.y - bottomRow) / scaledHeight;
        }
        else
        {
            // Scale limited by width
            float scaledWidth = PC.outRes.y * inAspectRatio;
            float leftColumn = (PC.outRes.x - scaledWidth) / 2;
            uv.x = (outCoord.x - leftColumn) / scaledWidth;
        }
    }
    return uv;
}

vec2 unAspectCorrectedUv(vec2 uv)
{
    ivec2 outCoord = ivec2(uv * PC.outRes + .5);
    float inAspectRatio = float(inRes().x) / float(inRes().y);
    float outAspectRatio = float(PC.outRes.x) / float(PC.outRes.y);
    if (!any(equal(inRes(), PC.outRes)))
    {
        if (inAspectRatio > outAspectRatio)
        {
            // Scale limited by height
            float scaledHeight = PC.outRes.x / inAspectRatio;
            float bottomRow = (PC.outRes.y - scaledHeight) / 2;
            // 1.8 is a hack here but result lines up better than with 2
            float offset = (bottomRow * 1.8) / scaledHeight;
            uv.y -= (uv.y - .5) * offset;
        }
        else
        {
            // Scale limited by width
            float scaledWidth = PC.outRes.y * inAspectRatio;
            float leftColumn = (PC.outRes.x - scaledWidth) / 2;
            // 1.8 is a hack here but result lines up better than with 2
            float offset = (leftColumn * 1.8) / scaledWidth;
            uv.x -= (uv.x - .5) * offset;
        }
    }
    return uv;
}

// Size of a magnified pixel in output resolution
#define MAGNIFIER_PX_DIM 12
#define MAGNIFIER_RADIUS_OUT 75.
#define MAGNIFIER_RATIO (MAGNIFIER_RADIUS_OUT / MAGNIFIER_PX_DIM)

vec2 magnifierUv(vec2 uv)
{
    // Some of this math is replicated for cursor alignment
    vec2 outCoord = uv * PC.outRes;

    vec2 cursorUv = PC.cursorUv;
    vec2 cursorCoordOut = cursorUv * PC.outRes;
    vec2 cursorCoordIn = cursorUv * inRes();

    vec2 fromMagnifierCenter = outCoord - cursorCoordOut;
    float distMagnifier = length(fromMagnifierCenter) / MAGNIFIER_RADIUS_OUT;

    if (distMagnifier < 1.)
    {
        // Zoom inside the magnifier area
        float magnifierRatio = MAGNIFIER_RATIO;
        if (flagZoom())
            magnifierRatio *= 4.;
        vec2 magnifierCoordIn =
            distMagnifier < .001
                ? cursorCoordIn
                : cursorCoordIn + normalize(fromMagnifierCenter) *
                                      distMagnifier * magnifierRatio;
        magnifierCoordIn = floor(magnifierCoordIn) + .5;

        // Have a distortion blend between the view resolution and magnifier
        // center area. It seems to make it easier to navigate with the
        // magnifier.
        // [0,1] from the edge of the magnifier area to the blend radius
        float magnifierBlendInnerRadius = .75;
        float magnifierBlendOuterRadius = 1. - magnifierBlendInnerRadius;
        float borderBlend =
            1. - saturate(
                     (distMagnifier - magnifierBlendInnerRadius) /
                     magnifierBlendOuterRadius);
        uv = mix(uv, magnifierCoordIn / inRes(), borderBlend);
    }

    return uv;
}

layout(local_size_x = GROUP_X, local_size_y = GROUP_Y) in;
void main()
{
    ivec2 outCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(outCoord, PC.outRes)))
        return;

    vec2 outUv = (vec2(outCoord) + .5) / vec2(PC.outRes);
    vec2 uv = aspectCorrectedUv(outUv);

    // Have most of the magnifier math happen relative to the output resolution
    float outInRatio = float(PC.outRes.x) / float(inRes().x);
    if (flagZoom())
        outInRatio *= 4;

    if (flagMagnifier() && outInRatio < MAGNIFIER_PX_DIM)
        uv = magnifierUv(uv);

    if (flagZoom())
        uv = zoom4xUv(uv);

    vec3 color = vec3(0);
    if (all(greaterThanEqual(uv, vec2(0))) && all(lessThanEqual(uv, vec2(1))))
    {
        uint channel = flagChannelType();
        if (channel > 3)
            color = textureLod(sampler2D(inColor, inSampler), uv, float(PC.lod))
                        .xyz;
        else
        {
            color = vec3(textureLod(
                sampler2D(inColor, inSampler), uv, float(PC.lod))[channel]);
        }
    }

    if (flagAbsBeforeRange())
        color = abs(color);

    vec3 scaledColor = (color - PC.range.x) / (PC.range.y - PC.range.x);

    // Handle magnifier peek sample and cursor separate from the magnify area to
    // keep smooth movement for the magnifier area and still snap the sample to
    // nearest texel
    if (flagMagnifier())
    {
        // Snap sample point in source resolution
        vec2 sampleUv = PC.cursorUv;
        sampleUv = aspectCorrectedUv(sampleUv);
        if (flagZoom())
            sampleUv = zoom4xUv(sampleUv);

        // Move to the nearest input texel center
        sampleUv *= inRes();
        vec2 sampleFract = fract(sampleUv);
        sampleUv = floor(sampleUv) + .5;
        sampleUv /= inRes();

        if (all(equal(outCoord, ivec2(0, 0))))
            outPeekColor.color = textureLod(
                sampler2D(inColor, nearestSampler), sampleUv, float(PC.lod));

        // Snap cursor in output resolution to tie it to the correct texel
        // visually
        vec2 cursorUv = sampleUv;
        if (flagZoom())
            cursorUv = unzoom4xUv(cursorUv);
        cursorUv = unAspectCorrectedUv(cursorUv);

        vec2 cursorCoord = cursorUv * PC.outRes;

        vec2 fromSample = cursorCoord - vec2(outCoord);
        float markerOuterRadius = 3;
        float markerInnerRadius = 2;
        if (all(lessThan(abs(fromSample), vec2(markerOuterRadius))))
            scaledColor = vec3(0);
        if (all(lessThan(abs(fromSample), vec2(markerInnerRadius))))
            scaledColor = vec3(1);
    }

    imageStore(outColor, outCoord, vec4(scaledColor, 1));
}
