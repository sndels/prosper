#pragma shader_stage(compute)

#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_EXT_shader_image_load_formatted : require

#include "scene/camera.glsl"
#include "scene/geometry.glsl"
#include "scene/instances.glsl"

// TODO: Put in a header?
struct DrawMeshletInstance
{
    uint drawInstanceIndex;
    uint meshletIndex;
};

layout(std430, set = STORAGE_SET, binding = 0) readonly buffer InDrawList
{
    uint count;
    DrawMeshletInstance instance[];
}
inDrawList;

layout(std430, set = STORAGE_SET, binding = 1) buffer OutDrawList
{
    uint count;
    DrawMeshletInstance instance[];
}
outDrawList;
layout(std430, set = STORAGE_SET, binding = 2) buffer OutDispatchArguments
{
    uint groupsX;
    uint groupsY;
    uint groupsZ;
}
outDispatchArguments;

layout(std430, set = STORAGE_SET, binding = 3) buffer OutSecondPhaseDrawList
{
    uint count;
    DrawMeshletInstance instance[];
}
outSecondPhaseDrawList;

layout(set = STORAGE_SET, binding = 4) uniform texture2D
    inHierarchicalDepth[MAX_HIZ_MIPS];
// This should clamp to 1 on/beyond edges
layout(set = STORAGE_SET, binding = 5) uniform sampler depthSampler;

layout(push_constant) uniform DrawListCullerPC
{
    uvec2 hizResolution;
    vec2 hizUvScale;
    // 0 means no hiz bound
    uint hizMipCount;
    uint outputSecondPhaseInput;
}
PC;

float signedDistance(vec4 plane, vec3 p) { return dot(plane, vec4(p, 1)); }

void transformBounds(inout MeshletBounds bounds, Transforms trfn, float scale)
{
    // Need full SRT for center as it's the cluster center in model space
    bounds.center = (vec4(bounds.center, 1.0) * trfn.modelToWorld).xyz;
    bounds.radius = abs(bounds.radius * scale);
    bounds.coneAxis = normalize(bounds.coneAxis * mat3(trfn.modelToWorld));
}

bool isSphereOutsideFrustum(MeshletBounds bounds)
{
    return signedDistance(camera.nearPlane, bounds.center) < -bounds.radius ||
           signedDistance(camera.farPlane, bounds.center) < -bounds.radius ||
           signedDistance(camera.leftPlane, bounds.center) < -bounds.radius ||
           signedDistance(camera.rightPlane, bounds.center) < -bounds.radius ||
           signedDistance(camera.bottomPlane, bounds.center) < -bounds.radius ||
           signedDistance(camera.topPlane, bounds.center) < -bounds.radius;
}

// From https://zeux.io/2023/01/12/approximate-projected-bounds/
// based on
// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael
// Mara, Morgan McGuire. 2013
// Assumes c,r are in view space and that the projection is symmetrical
bool projectSphereView(
    vec3 c, float r, float znear, float P00, float P11, out vec4 aabb)
{
    if (c.z < r + znear)
        return false;

    vec3 cr = c * r;
    float czr2 = c.z * c.z - r * r;

    float vx = sqrt(c.x * c.x + czr2);
    float minx = (vx * c.x - cr.z) / (vx * c.z + cr.x);
    float maxx = (vx * c.x + cr.z) / (vx * c.z - cr.x);

    float vy = sqrt(c.y * c.y + czr2);
    float miny = (vy * c.y - cr.z) / (vy * c.z + cr.y);
    float maxy = (vy * c.y + cr.z) / (vy * c.z - cr.y);

    aabb = vec4(minx * P00, miny * P11, maxx * P00, maxy * P11);
    // clip space -> uv space
    aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f);

    return true;
}

bool isSphereOccluded(MeshletBounds bounds)
{
    if (PC.hizMipCount == 0)
        return false;

    vec4 centerInView = camera.worldToCamera * vec4(bounds.center, 1);

    // Figure out bounds radius in texels, this also early outs if the cam is
    // inside the bounds, or if the bounds are behind the camera
    vec4 aabbScreen;
    float conservativeRadius = bounds.radius * camera.maxViewScale;
    if (!projectSphereView(
            vec3(centerInView.xy, -centerInView.z), conservativeRadius,
            camera.near, camera.cameraToClip[0][0], camera.cameraToClip[1][1],
            aabbScreen))
        return false;
    vec2 aabbDiagonalPx = aabbScreen.zw - aabbScreen.xy;
    aabbDiagonalPx *= camera.resolution;
    float pxDiameter = length(aabbDiagonalPx);

    // Sample from the first mip where the whole sphere will fit a 2x2 texel
    // area. floor without + 1 as hiz mip 0 is depth mip 1. clamp to 0 as < 1
    // radii would be negative.
    uint hizMip = uint(max(floor(log2(pxDiameter)), 0));

    // Figure out the closest depth on the bounds for conservative culling
    // TODO:
    // We're only interested in z and w, so xy are extra math here
    vec3 viewWorldDir = normalize(camera.eye.xyz - bounds.center);
    vec3 closestWorldPos = bounds.center + viewWorldDir * bounds.radius;
    vec4 closestClipPos =
        camera.cameraToClip * camera.worldToCamera * vec4(closestWorldPos, 1);
    float closestDepth = closestClipPos.z / closestClipPos.w;

    if (hizMip >= PC.hizMipCount - 1)
    {
        float hizDepth =
            texture(
                sampler2D(
                    inHierarchicalDepth[nonuniformEXT(PC.hizMipCount - 1)],
                    depthSampler),
                vec2(0))
                .r;
        return closestDepth < hizDepth;
    }
    uvec2 mipResolution = PC.hizResolution >> hizMip;

    // Figure out what uv to sample hiz from
    vec4 centerClipPos = camera.cameraToClip * centerInView;
    centerClipPos.xyz /= centerClipPos.w;

    vec2 uv = centerClipPos.xy * .5 + .5;
    // HiZ is rounded up to the next power of 2 so we need to fix up the uv
    uv *= PC.hizUvScale;
    // Pick the closest 2x2 set of texels around the sample for gather
    uv *= mipResolution;
    uv -= .5;
    uv = floor(uv);
    uv += .5;
    uv /= mipResolution;
    // Sampler should clamp to a border of 1 so that out of bounds samples don't
    // get incorrectly culled

    // Gather the neighborhood around the sample point
    // Let's not worry about the cases when the whole bounds are guaranteed to
    // fit in one px. Sub-pixel meshlets are a bad time for perf regardless.
    vec4 hizDepths = textureGather(
        sampler2D(inHierarchicalDepth[nonuniformEXT(hizMip)], depthSampler), uv,
        0);

    // Reverse-Z so furthest away point is the smallest depth value and we know
    // the cluster is occluded if its depth value is smaller than the depth
    // buffer value
    float hizDepth =
        min(min(hizDepths.x, hizDepths.y), min(hizDepths.z, hizDepths.w));
    return closestDepth < hizDepth;
}

bool isConeCapHidden(MeshletBounds bounds)
{
    // From meshoptimizer.h
    return dot(bounds.center - camera.eye.xyz, bounds.coneAxis) >=
           (bounds.coneCutoff * length(bounds.center - camera.eye.xyz) +
            bounds.radius);
}

layout(local_size_x = GROUP_X) in;
void main()
{
    // These were zeroed before the pass to init X for use as the write pointer
    // without barriers after this init that now just sets the other group
    // counts to 1
    if (gl_GlobalInvocationID.x == 0)
    {
        outDispatchArguments.groupsY = 1;
        outDispatchArguments.groupsZ = 1;
    }

    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= inDrawList.count)
        return;

    DrawMeshletInstance meshletInstance = inDrawList.instance[threadIndex];
    DrawInstance instance =
        drawInstances.instance[meshletInstance.drawInstanceIndex];
    GeometryMetadata metadata = geometryMetadatas.data[instance.meshIndex];
    MeshletInfo meshletInfo =
        loadMeshletInfo(metadata, meshletInstance.meshletIndex);

    Transforms trfn =
        modelInstanceTransforms.instance[instance.modelInstanceIndex];

    float scale = modelInstanceScales.instance[instance.modelInstanceIndex];
    bool meshletVisible = true;
    bool meshletOccluded = false;
    if (scale != 0.)
    {
        MeshletBounds bounds =
            loadMeshletBounds(metadata, meshletInstance.meshletIndex);
        transformBounds(bounds, trfn, scale);

        // TODO: Flip the logic to avoid !s here
        meshletVisible = !isSphereOutsideFrustum(bounds);
        if (meshletVisible)
            meshletVisible = !isConeCapHidden(bounds);
        if (meshletVisible)
        {
            meshletOccluded = isSphereOccluded(bounds);
            meshletVisible = !meshletOccluded;
        }
    }

    {
        // Figure out the subgroup offset for writes
        uvec4 visibleMeshletsMask = subgroupBallot(meshletVisible);
        uint subgroupMeshletCount = subgroupBallotBitCount(visibleMeshletsMask);
        uint subgroupStartOffset;
        if (subgroupElect())
        {
            // Keep count in the buffer in sync for consistency
            atomicAdd(outDrawList.count, subgroupMeshletCount);
            subgroupStartOffset =
                atomicAdd(outDispatchArguments.groupsX, subgroupMeshletCount);
        }
        subgroupStartOffset = subgroupBroadcastFirst(subgroupStartOffset);

        // Write out within the subgroup block
        uint threadOffset =
            subgroupBallotExclusiveBitCount(visibleMeshletsMask);
        if (meshletVisible)
            outDrawList.instance[subgroupStartOffset + threadOffset] =
                meshletInstance;
    }

    if (PC.outputSecondPhaseInput == 1)
    {
        // Figure out the subgroup offset for writes
        uvec4 occludedMeshletsMask = subgroupBallot(meshletOccluded);
        uint subgroupMeshletCount =
            subgroupBallotBitCount(occludedMeshletsMask);
        uint subgroupStartOffset;
        if (subgroupElect())
            subgroupStartOffset =
                atomicAdd(outSecondPhaseDrawList.count, subgroupMeshletCount);
        subgroupStartOffset = subgroupBroadcastFirst(subgroupStartOffset);

        // Write out within the subgroup block
        uint threadOffset =
            subgroupBallotExclusiveBitCount(occludedMeshletsMask);
        if (meshletOccluded)
            outSecondPhaseDrawList
                .instance[subgroupStartOffset + threadOffset] = meshletInstance;
    }
}
