#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_image_load_formatted : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require

#pragma shader_stage(raygen)

#include "../../brdf.glsl"
#include "../../common/random.glsl"
#include "../../common/sampling.glsl"
#include "../../debug.glsl"
#include "../../scene/camera.glsl"
#include "../../scene/geometry.glsl"
#include "../../scene/instances.glsl"
#include "../../scene/lighting.glsl"
#include "../../scene/materials.glsl"
#include "../../scene/skybox.glsl"
#include "../ray.glsl"
#include "../rt_data.glsl"

#include "../payload.glsl"
#include "rtpc.glsl"

layout(set = OUTPUT_SET, binding = 0) uniform image2D previousColor;
layout(set = OUTPUT_SET, binding = 1) uniform image2D outColor;

layout(location = 0) rayPayloadEXT RayPayload payload;

vec3 mappedNormal(vec3 tangentSpaceNormal, vec3 normal, vec3 tangent, float sgn)
{
    vec3 vNt = tangentSpaceNormal;
    vec3 vN = normal;
    vec3 vT = tangent;
    // From mikktspace.com
    vec3 vB = sgn * cross(vN, vT);
    return normalize(vNt.x * vT + vNt.y * vB + vNt.z * vN);
}

#define MISS_INDEX 0xFFFFFFFF

float shadow(vec3 p, vec3 l, float tMin, float lDist)
{
    const uint mask = 0xFF;
    const uint flags = gl_RayFlagsTerminateOnFirstHitEXT;

    payload.drawInstanceIndex = MISS_INDEX;
    payload.randomSeed = pcg(pcg_state.x ^ pcg_state.y);

    traceRayEXT(as, flags, mask, 0, 0, 0, p, tMin, l, lDist, 0);

    return payload.drawInstanceIndex == MISS_INDEX ? 1. : 0.;
}

RayPayload traceClosest(Ray ray)
{
    const uint mask = 0xFF;
    const uint flags = gl_RayFlagsNoneEXT; // We want anyhit here

    // Tight scope for payload use as having it dangle seems to prevent reuse
    payload.drawInstanceIndex = MISS_INDEX;
    payload.primitiveID = MISS_INDEX;
    payload.baryCoord = vec2(0);
    payload.randomSeed = pcg(pcg_state.x ^ pcg_state.z);

    traceRayEXT(as, flags, mask, 0, 0, 0, ray.o, ray.tMin, ray.d, ray.tMax, 0);

    RayPayload ret;
    ret.drawInstanceIndex = payload.drawInstanceIndex;
    ret.primitiveID = payload.primitiveID;
    ret.baryCoord = payload.baryCoord;

    return ret;
}

void addBounce(inout vec3 accColor, vec3 color, uint bounce)
{
    if (bounce > 0 && flagClampIndirect())
        color = clamp(color, vec3(0), vec3(2));
    accColor += color;
}

void importanceSampleBounce(
    VisibleSurface surface, inout vec3 throughput, inout vec3 rd)
{
    // Multiple importance sample diffuse and specular only picking one
    // TODO: Better heuristic for specular weight
    bool specularOnly = surface.material.metallic > 0.999;
    float specularWeight = specularOnly ? 1. : 0.5;
    float diffuseWeight = 1. - specularWeight;

    mat3 normalBasis = orthonormalBasis(surface.normalWS);
    vec3 vInBasis = normalBasis * surface.invViewRayWS;
    float alpha = surface.material.roughness * surface.material.roughness;

    bool pickDiffuse = rnd01() < diffuseWeight;
    vec3 brdf;
    float NoL;
    float pdf;
    if (pickDiffuse)
    {
        rd = cosineSampleHemisphere(surface.normalWS, rnd2d01());
        NoL = saturate(dot(surface.normalWS, rd));

        brdf = lambertBRFD(surface.material.albedo);

        pdf = cosineHemispherePdf(NoL);
        // TODO:
        // This is from RTGII reference path tracer and seems correct but is
        // not energy conserving
        pdf *= diffuseWeight;
    }
    else
    {
        rd = sampleVisibleTrowbridgeReitz(vInBasis, alpha, rnd2d01());
        rd = transpose(normalBasis) * rd;
        NoL = saturate(dot(surface.normalWS, rd));

        // Common dot products
        vec3 h = normalize(surface.invViewRayWS + rd);
        float NoH = saturate(dot(surface.normalWS, h));
        float VoH = saturate(dot(surface.invViewRayWS, h));

        // Use standard approximation of default fresnel
        vec3 f0 = fresnelZero(surface);

        brdf = cookTorranceBRDF(
            NoL, surface.NoV, NoH, VoH, f0, surface.material.roughness);

        pdf = visibleTrowbridgeReitzPdf(vInBasis, normalBasis * rd, alpha);
        // TODO:
        // This is from RTGII reference path tracer and seems correct but is
        // not energy conserving
        pdf *= specularWeight;
    }
    throughput *= max(brdf * NoL / pdf, vec3(0));
}

VisibleSurface evaluateSurface(Ray ray, RayPayload hit)
{
    DrawInstance instance = drawInstances.instance[hit.drawInstanceIndex];

    Transforms trfn =
        modelInstanceTransforms.instance[instance.modelInstanceID];

    GeometryMetadata metadata = geometryMetadatas.data[instance.meshID];

    Vertex v0 = loadVertexThroughIndexBuffer(metadata, hit.primitiveID * 3 + 0);
    Vertex v1 = loadVertexThroughIndexBuffer(metadata, hit.primitiveID * 3 + 1);
    Vertex v2 = loadVertexThroughIndexBuffer(metadata, hit.primitiveID * 3 + 2);

    Vertex vi = interpolate(v0, v1, v2, hit.baryCoord);
    Vertex v = transform(vi, trfn);

    VisibleSurface surface;
    surface.positionWS = v.Position;
    surface.invViewRayWS = -ray.d;
    surface.uv = v.TexCoord0;
    surface.material = sampleMaterial(instance.materialID, v.TexCoord0);

    // -2 signals no material normal, w=0 no vertex tangent
    if (surface.material.normal.x != -2 && v.Tangent.w != 0)
        surface.normalWS = mappedNormal(
            surface.material.normal, v.Normal, v.Tangent.xyz, v.Tangent.w);
    else
        surface.normalWS = normalize(v.Normal);

    surface.NoV = saturate(dot(surface.normalWS, surface.invViewRayWS));
    surface.linearDepth = length(surface.positionWS - ray.o);

    return surface;
}

vec3 debugColor(RayPayload hit, VisibleSurface surface)
{
    DrawInstance instance = drawInstances.instance[hit.drawInstanceIndex];

    DebugInputs di;
    di.meshID = instance.meshID;
    di.primitiveID = hit.primitiveID;
    di.materialID = instance.materialID;
    di.position = surface.positionWS;
    di.shadingNormal = surface.normalWS;
    di.texCoord0 = surface.uv;
    return commonDebugDraw(PC.drawType, di, surface.material);
}

vec3 evaluateDirectLighting(VisibleSurface surface, vec3 throughput)
{
    // Alpha=0 hits don't have a valid surface
    if (surface.material.alpha == 0)
        return vec3(0);

    // Uniform sampling adapted from Physically Based Rendering 3rd ed.
    // https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Direct_Lighting

    // Sun and others
    uint lightCount = 1 + pointLights.count + spotLights.count;
    uint lightIndex = min(uint(rnd01() * lightCount), lightCount - 1);

    vec3 l;
    float d;
    vec3 irradiance;
    sampleLight(surface, lightIndex, l, d, irradiance);

    // Don't bother evaluating backface lighting
    if (dot(l, surface.normalWS) <= 0)
        return vec3(0);

    irradiance *= shadow(surface.positionWS, l, 0.1, d);

    // Account for sampling the lights uniformly
    irradiance *= lightCount;

    return throughput * irradiance * evalBRDFTimesNoL(l, surface);
}

void main()
{
    uvec2 px = gl_LaunchIDEXT.xy;

    pcg_state = uvec3(px, PC.frameIndex);

    vec2 jitteredUV = (px + rnd2d01()) / gl_LaunchSizeEXT.xy;

    vec3 color = vec3(0);
    vec3 throughput = vec3(1);
    uint bounce = 0;
    Ray ray = flagDepthOfField()
                  ? thinLensCameraRay(
                        jitteredUV, rnd2d01(), PC.apertureDiameter,
                        PC.focusDistance, PC.focalLength)
                  : pinholeCameraRay(jitteredUV);
    while (bounce < MAX_BOUNCES)
    {
        if (bounce >= PC.maxBounces)
            break;

        RayPayload hit = traceClosest(ray);
        if (hit.drawInstanceIndex == MISS_INDEX)
        {
            if (flagIBL())
            {
                vec3 skyColor = textureLod(skybox, ray.d, 0).rgb;
                addBounce(color, throughput * skyColor, bounce);
            }
            break;
        }

        VisibleSurface surface = evaluateSurface(ray, hit);

        if (PC.drawType != DrawType_Default &&
            PC.drawType != DrawType_MeshletID)
        {
            color = debugColor(hit, surface);
            break;
        }

        addBounce(color, evaluateDirectLighting(surface, throughput), bounce);

        vec3 rd;
        importanceSampleBounce(surface, throughput, rd);

        if (bounce > PC.rouletteStartBounce)
        {
            // Russian roulette based on throughput from PBR 3rd edition
            if (rnd01() < max(.05, 1. - max3(throughput)))
                break;
        }

        ray.o = offsetRay(surface);
        ray.d = rd;
        ray.tMin = 0;
        ray.tMax = 1.0 / 0.0; // INF
        bounce++;
    }

    if (flagSkipHistory() || !flagAccumulate())
    {
        imageStore(outColor, ivec2(px), vec4(color, 1));
    }
    else
    {
        vec4 history = imageLoad(previousColor, ivec2(px));
        vec3 historyColor = history.rgb;
        float historyCount = history.a + 1;

        vec3 newColor = historyColor + (color - historyColor) / historyCount;

        imageStore(outColor, ivec2(px), vec4(newColor, historyCount));
    }
}
